{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport * as moment from 'moment';\nimport { catchError } from 'rxjs/internal/operators/catchError';\nimport { switchMap, filter, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./login.service\";\nimport * as i2 from \"@angular/router\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  var _class;\n  class TokenInterceptor {\n    constructor(loginService, router) {\n      this.loginService = loginService;\n      this.router = router;\n      this.refreshTokenInProgress = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n    intercept(request, next) {\n      request = this.fillHeader(request);\n      return next.handle(request).pipe(catchError(err => {\n        if (err.status === 403) {\n          if (err.error.name === \"TokenExpiredError\") {\n            if (!this.refreshTokenInProgress) {\n              this.refreshTokenInProgress = true;\n              this.refreshTokenSubject.next(null);\n              return this.loginService.refreshToken().pipe(switchMap(accessToken => {\n                localStorage.setItem('token', accessToken);\n                this.refreshTokenInProgress = false;\n                this.refreshTokenSubject.next(accessToken);\n                return next.handle(this.fillHeader(request));\n              }));\n            } else {\n              return this.refreshTokenSubject.pipe(filter(result => result !== null), take(1), switchMap(res => {\n                return next.handle(this.fillHeader(request));\n              }));\n            }\n          } else if (err.error.name === 'TokenRevokedError') {\n            localStorage.removeItem('token');\n            this.router.navigateByUrl('/login');\n          } else {\n            throw throwError(err);\n          }\n        }\n        throw throwError(err);\n      }));\n    }\n    fillHeader(request) {\n      const token = localStorage.getItem('token');\n      const header = {\n        now: moment().format()\n      };\n      if (token) {\n        header['token'] = token;\n      }\n      return request.clone({\n        setHeaders: header\n      });\n    }\n  }\n  _class = TokenInterceptor;\n  _class.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.Router));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}