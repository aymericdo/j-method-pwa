{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nimport * as i2 from \"./notification.service\";\nimport * as i3 from \"./auth.service\";\nimport * as i4 from \"@angular/router\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  var _class;\n  class AppComponent {\n    constructor(swPush, notificationService, auth) {\n      this.swPush = swPush;\n      this.notificationService = notificationService;\n      this.auth = auth;\n      this.signIn = false;\n      this.title = 'j-meth';\n      this.VAPID_PUBLIC_KEY = 'BA0IrWNjeSUg-vrORw1qaiMZ4-echF259O25I42NywBlbC3f7OzdiJjooH27nOzjtID5EoQ4pZO1wOo7lzwi7iQ';\n    }\n    ngOnInit() {\n      if (environment.production && this.auth.isAuthenticated()) {\n        this.subscribeToNotifications();\n      }\n    }\n    subscribeToNotifications() {\n      this.swPush.requestSubscription({\n        serverPublicKey: this.VAPID_PUBLIC_KEY\n      }).then(sub => {\n        this.notificationService.postSub(sub).subscribe();\n      }).catch(err => console.error('Could not subscribe to notifications', err));\n    }\n  }\n  _class = AppComponent;\n  _class.ɵfac = function AppComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.SwPush), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i3.AuthService));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-root\"]],\n    decls: 1,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"router-outlet\");\n      }\n    },\n    dependencies: [i4.RouterOutlet]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}